%{
	#include <iostream>

  #include <vector>
  #include <fstream>
  #include "bp.hpp"
  #include "output.hpp"
	#include "parser.h"
  #include "symbolTable.h"
  //#include "MyStack.h"
  #define MAX_BYTE 255
#ifdef WORK_ON_CLION
  #include<unistd.h>
	extern "C" int yylex();
	extern "C" int yyerror(const char * message);
#endif
#ifndef WORK_ON_CLION
extern int yylex();
	extern int yyerror(const char * message);
#endif
struct NewSTYPE {
    int line;
    char val[TEXT_LEN];
    char token[TEXT_LEN];
    vector<int> trueList;
    vector<int> falseList;
    vector<int> nextList;
    vector<int> breakList;
    vector<int> continueList;
    string quad;
    NewSTYPE(){}
    NewSTYPE(YYSTYPE& old){
      line=old.line;
      strcpy(val,old.val);
      strcpy(token,old.token);
    }
    NewSTYPE(NewSTYPE& old){
      line=old.line;
      strcpy(val,old.val);
      strcpy(token,old.token);
      trueList=vector<int>(old.trueList);
      falseList=vector<int>(old.falseList);
      nextList=vector<int>(old.nextList);
      breakList=vector<int>(old.breakList);
      continueList=vector<int>(old.continueList);
      quad=string(old.quad);
    }
};
#undef YYSTYPE
typedef struct NewSTYPE YYSTYPE;
#define YYSTYPE_IS_DECLARED = 1
	int preCounter;
	int msgCounter=0;
	string THISFUNC;
  std::string preID;
  using std::string;
	vector<string> argsVec = vector<string>();
	std::stack<string> expStack;
  vector<vector<string> > funcArgs;
bool Registers[16]={true,true,true,true,true,true,true,true,true,true,true,
                    true,true,true,true,true};
char Registers_names[16][4]={"$10","$11","$12","$13","$14","$15",
                             "$16","$17","$18","$19","$20","$21","$22","$23","$24","$25"};
  void SaveRegisters();
  void RecoverRegisters();
	void newScope();
	void endScope();
  int stringToInt(string num);
  string intToString(int num);
  void funcCheck(const char* id,bool newFunc);
  void varCheck(const char* name,bool newVar);
  void insertVar(const char* name,const char* type,bool arg);
	void insertFunc(const char* id,const char* retType,vector<string> Vec);
	void checkType(string op);
  void checkArgsVec(const char* id);
  string getVarType(const char* name);
  string getRetType(string id);
  void checkMain();
  void printExpStack();
  const char* GetRegister();
  void FreeRegister(string Reg);
  void FreeAllRegisters();
  void FreeArgsRegisters(vector<string> args);
  void BinopCode(NewSTYPE& sourceExp,NewSTYPE& exp1,NewSTYPE& exp2,const char* op);
  void VarLoadCode(NewSTYPE& sourceExp,const char* var);
  void ImmLoadCode(NewSTYPE& sourceExp,const char* value);
  void DecVarCode(const char* var);
  void AssignVarCode(string type,const char* var,NewSTYPE* exp=NULL);
  int GetVarOffset(const char* var);
  void NotCode(NewSTYPE& sourceExp,NewSTYPE& exp);
  void AndCode(NewSTYPE& sourceExp,NewSTYPE& exp1,NewSTYPE& exp2);
  void OrCode(NewSTYPE& sourceExp,NewSTYPE& exp1,NewSTYPE& exp2);
  void RelopCode(NewSTYPE& sourceExp,NewSTYPE& exp1,NewSTYPE& exp2,const char* op);
  void TrueCode(NewSTYPE& sourceExp);
  void FalseCode(NewSTYPE& sourceExp);
  void CallCode(NewSTYPE& sourceExp,string func,vector<string> vec);
  const char* StringLoadCode(char* str);
  void mybpatch(std::vector<int>& address_list, const std::string &loc);
  void newFuncCode(string str);
  void retFuncCode(string value="$0");
  void preCondCode(NewSTYPE& exp);
  void ExpListBoolCode(NewSTYPE& exp);
  void BoolCode(NewSTYPE& exp);
  template<typename T>
  vector<T> operator+ (vector<T>& vec1,vector<T>& vec2) {
    vector<T> vec(vec2);
    for (size_t i = 0; i < vec1.size(); ++i) {
      vec.push_back(vec1.at(i));
    }
    return vec;

  }
%}
%token VOID
%token INT
%token BYTE
%token B
%token BOOL
%token TRUE
%token FALSE
%token RETURN
%token IF
%nonassoc ELSE
%token WHILE
%token BREAK
%token CONTINUE
%token PRECOND
%token SC
%token COMMA
%token LBRACE
%token RBRACE
%token ID
%token NUM
%token STRING
%right ASSIGN
%left OR
%left AND
%nonassoc RELOP
%left BINOP2
%left BINOP1
%right NOT
%left LPAREN
%left RPAREN
%token EF //EOF

%%
S : NewScope Initial Program EF {checkMain();} EndScope {CodeBuffer::instance().printDataBuffer(); CodeBuffer::instance().printCodeBuffer(); return 0;};
Program : Funcs ;
Funcs : NewScope FuncDecl EndScope Funcs
      | %empty;
FuncDecl : RetType ID {funcCheck($2.val,true);expStack.push($1.token); }
           LPAREN {argsVec.clear(); newFuncCode($2.val);} Formals RPAREN{
            insertFunc($2.val,$1.token,argsVec);
            preCounter = 0;preID = $2.val;}
            PreConditions LBRACE Statements RBRACE {expStack.pop();retFuncCode();};
RetType : Type
        | VOID ;
Formals : FormalsList
        | %empty;
FormalsList : FormalDecl
            | FormalDecl COMMA FormalsList ;
FormalDecl : Type ID {insertVar($2.val,$1.token,true);argsVec.push_back($1.token);};
PreConditions : PreConditions PreCondition
              | %empty;
PreCondition : PRECOND LPAREN Exp {checkType("PRECOND");} RPAREN {preCounter++; preCondCode($3);} ;
Statements : Statement
           | Statements Statement {
             $$.breakList=$1.breakList+$2.breakList;
             $$.continueList=$1.continueList+$2.continueList;
};
Statement : OpenStatement
          | ClosedStatement ;
Call : ID LPAREN {funcCheck($1.val,false);funcArgs.push_back(vector<string>());} ExpListFirst RPAREN {checkArgsVec($1.val);
     expStack.push(getRetType($1.val));CallCode($$,$1.val,funcArgs.back());funcArgs.pop_back();};
ExpList : Exp { ExpListBoolCode($1); funcArgs.back().push_back($1.val);}
        | Exp { ExpListBoolCode($1);}
                COMMA ExpList {funcArgs.back().push_back($1.val);}
        | %empty ;
ExpListFirst: {expStack.push("FUNC_ARGS");} ExpList;
Type : INT
     | BOOL
     | BYTE ;
Exp : SimpleExp { BoolCode($1); $$=NewSTYPE($1); }
     | LPAREN Exp RPAREN {$$=NewSTYPE($2); }
     | Exp BINOP1 Exp { checkType($2.token); BinopCode($$,$1,$3,$2.val);}
     | Exp BINOP2 Exp { checkType($2.token); BinopCode($$,$1,$3,$2.val);}
     | NOT Exp { checkType($1.token); $$=NewSTYPE($2);NotCode($$,$2);}
     | Exp AND Exp { checkType($2.token) ;AndCode($$,$1,$3);}
     | Exp OR Exp { checkType($2.token) ;OrCode($$,$1,$3);}
     | Exp RELOP Exp { checkType($2.token) ; RelopCode($$,$1,$3,$2.val);} ;
SimpleExp : ID {if(!expStack.empty()) varCheck($1.val,false); expStack.push(getVarType($1.val)); VarLoadCode($$,$1.val);}
            | Call { $$=NewSTYPE($1);  }
            | NUM { expStack.push("INT"); ImmLoadCode($$,$1.val);}
            | NUM B { expStack.push("BYTE"); ImmLoadCode($$,$1.val); strcpy($$.token,"BYTE");
        if(stringToInt($1.val)>MAX_BYTE){output::errorByteTooLarge(yylval.line,$1.val);exit(8);}}
            | STRING { expStack.push("STRING"); strcpy($$.val,StringLoadCode($1.val));}
            | TRUE { expStack.push("BOOL");TrueCode($$);/* ImmLoadCode($$,$1.val);*/ }
            | FALSE { expStack.push("BOOL");FalseCode($$); /*ImmLoadCode($$,$1.val);*/ };
OpenStatement : NewScope IF LPAREN ExpIf M RPAREN Statement M EndScope {
                   mybpatch($4.trueList,$5.quad);
                   mybpatch($4.falseList,$8.quad);
                   mybpatch($7.nextList,$8.quad);
                   /*$$.nextList=$4.falseList;*/
                   $$.breakList=$7.breakList;
                   $$.continueList=$7.continueList;}
              | NewScope IF LPAREN ExpIf M RPAREN ClosedStatement EndScope N M ELSE
              NewScope OpenStatement M EndScope  {
                  mybpatch($4.trueList,$5.quad);
                  mybpatch($4.falseList,$10.quad);
                  mybpatch($9.nextList,$14.quad);
                  mybpatch($7.nextList,$14.quad);
                  mybpatch($13.nextList,$14.quad);
                  /*$$.nextList=$9.nextList+$7.nextList;
                  $$.nextList=$$.nextList+$13.nextList;*/
                  $$.breakList=$7.breakList+$13.breakList;
                  $$.continueList=$7.continueList+$13.continueList;}
              | NewScope WHILE LPAREN M ExpWhile M RPAREN OpenStatement N M {expStack.pop();} EndScope{
                  mybpatch($9.nextList,$4.quad);
                  mybpatch($5.trueList,$6.quad);
                  mybpatch($5.falseList,$10.quad);
                  mybpatch($8.breakList,$10.quad);
                  mybpatch($8.continueList,$4.quad);};
ExpIf : Exp {checkType("IF"); $$=NewSTYPE($1);};
ExpWhile : {expStack.push("WHILE");} Exp {checkType("WHILE");$$=NewSTYPE($2);};
ClosedStatement : SimpleStatement
                | NewScope WHILE LPAREN M ExpWhile M RPAREN ClosedStatement N M {expStack.pop();} EndScope{
                  mybpatch($9.nextList,$4.quad);
                  mybpatch($5.trueList,$6.quad);
                  mybpatch($5.falseList,$10.quad);
                  mybpatch($8.breakList,$10.quad);
                  mybpatch($8.continueList,$4.quad);}
                | NewScope IF LPAREN ExpIf M RPAREN ClosedStatement EndScope N M ELSE
                  NewScope ClosedStatement M EndScope {
                  mybpatch($4.trueList,$5.quad);
                  mybpatch($4.falseList,$10.quad);
                  mybpatch($9.nextList,$14.quad);
                  mybpatch($7.nextList,$14.quad);
                  mybpatch($13.nextList,$14.quad);
                 /* $$.nextList=$9.nextList+$7.nextList;
                  $$.nextList=$$.nextList+$13.nextList;*/
                  $$.breakList=$7.breakList+$13.breakList;
                  $$.continueList=$7.continueList+$13.continueList;};
SimpleStatement : NewScope LBRACE Statements RBRACE EndScope {
                   $$=NewSTYPE($3);
                    }
                | Type ID SC {insertVar($2.val,$1.token,false); DecVarCode($2.val);AssignVarCode($1.token,$2.val);}
                | Type ID {expStack.push($1.token);} ASSIGN Exp SC {checkType("ASSIGN"); insertVar($2.val,$1.token,false);DecVarCode($2.val);AssignVarCode($1.token,$2.val,&$5);}
                | ID {varCheck($1.val,false); expStack.push(getVarType($1.val)); } ASSIGN Exp {checkType("ASSIGN"); AssignVarCode(getVarType($1.val),$1.val,&$4);} SC
                | Call SC { $$=NewSTYPE($1); expStack.pop(); FreeRegister($1.val);
                            mybpatch($1.trueList,$1.quad);mybpatch($1.falseList,$1.quad);};
                | RETURN SC {checkType("RETURN_VOID");retFuncCode();}
                | RETURN Exp SC {ExpListBoolCode($2);
                                 checkType("RETURN");retFuncCode($2.val);}
                | BREAK SC {checkType("BREAK");
                         $$.breakList.push_back(CodeBuffer::instance().emit("j "));}
                | CONTINUE SC {checkType("CONTINUE");
                         $$.continueList.push_back(CodeBuffer::instance().emit("j "));}
                | ID {output::errorSyn(yylval.line);exit(1);} SimpleExp;
NewScope : %empty { newScope();};
EndScope : %empty {  endScope();};
Initial : %empty {
        CodeBuffer::instance().emit(".globl main");
        argsVec.clear();
        argsVec.push_back("STRING");
        Symbol::TableStackFunc.top().InsertFunc("print",output::makeFunctionType("VOID",argsVec));
        CodeBuffer::instance().emit("print:");
        CodeBuffer::instance().emit("subu $fp,$sp,4");
        CodeBuffer::instance().emit("lw $a0,4($fp)");
        CodeBuffer::instance().emit("li $v0,4");
        CodeBuffer::instance().emit("syscall");
        CodeBuffer::instance().emit("jr $ra");
        argsVec.clear();
        argsVec.push_back("INT");
        Symbol::TableStackFunc.top().InsertFunc("printi",output::makeFunctionType("VOID",argsVec));
        CodeBuffer::instance().emit("printi:");
        CodeBuffer::instance().emit("subu $fp,$sp,4");
        CodeBuffer::instance().emit("lw $a0,4($fp)");
        CodeBuffer::instance().emit("li $v0,1");
        CodeBuffer::instance().emit("syscall");
        CodeBuffer::instance().emit("jr $ra");

        CodeBuffer::instance().emitData("errorMsg:  .asciiz \"Error division by zero\\n\"");
        CodeBuffer::instance().emit("__divError:");
        CodeBuffer::instance().emit("la $a0,errorMsg");
        CodeBuffer::instance().emit("li $v0,4");
        CodeBuffer::instance().emit("syscall");
        CodeBuffer::instance().emit("li $v0,10");
        CodeBuffer::instance().emit("syscall");

        CodeBuffer::instance().emitData("errorMsgPre1:  .asciiz \"Precondition hasn't been satisfied for function \"");
        CodeBuffer::instance().emitData("errorMsgPre2:  .asciiz \"\\n\"");
        CodeBuffer::instance().emit("__preError:");
        CodeBuffer::instance().emit("la $a0,errorMsgPre1");
        CodeBuffer::instance().emit("li $v0,4");
        CodeBuffer::instance().emit("syscall");
        CodeBuffer::instance().emit("lw $a0,0($sp)");
        CodeBuffer::instance().emit("li $v0,4");
        CodeBuffer::instance().emit("syscall");
        CodeBuffer::instance().emit("la $a0,errorMsgPre2");
        CodeBuffer::instance().emit("li $v0,4");
        CodeBuffer::instance().emit("syscall");
        CodeBuffer::instance().emit("li $v0,10");
        CodeBuffer::instance().emit("syscall");};

M : %empty{ $$.quad=CodeBuffer::instance().genLabel();};
N : %empty{ $$.nextList.push_back(CodeBuffer::instance().emit("j "));};

%%
//TODO main
int main()
{
#ifdef WORK_ON_CLION
  freopen("mips.asm","w",stdout);
#endif
  yyparse();
}

int yyerror(const char * message)
{
    if (message=="syntax error"){
        output::errorSyn(yylval.line);
    } else {
    //  printExpStack();
        output::errorLex(yylval.line);
    }
    exit(1);
}
void newScope(){
  if(!Symbol::TableStackVar.empty()){
    Symbol::VarTable* parent =&Symbol::TableStackVar.top();
    Symbol::TableStackVar.push(Symbol::VarTable(parent,(*parent).GetOffset(),(*parent).GetMinusOffset()));
  }else{
    Symbol::TableStackVar.push(Symbol::VarTable());
  }
  if(!Symbol::TableStackFunc.empty()){
    Symbol::FuncTable* parent =&Symbol::TableStackFunc.top();
    Symbol::TableStackFunc.push(Symbol::FuncTable(parent,(*parent).GetOffset()));
  }else{
    Symbol::TableStackFunc.push(Symbol::FuncTable());
  }
}
void endScope(){
  Symbol::TableStackVar.pop();
  if(Symbol::TableStackVar.empty()){
    Symbol::VarTable::names.resize(0);
    Symbol::VarTable::types.resize(0);
  } else {
    Symbol::VarTable::names.resize(Symbol::TableStackVar.top().GetOffset());
    Symbol::VarTable::types.resize(Symbol::TableStackVar.top().GetOffset());
  }
  Symbol::TableStackFunc.pop();

}
void insertVar(const char* name,const char* type,bool arg){
  varCheck(name,true);
  if(arg){
    Symbol::TableStackVar.top().InsertArg(name,type);
  } else {
    Symbol::TableStackVar.top().InsertVar(name,type);
  }

}
void varCheck(const char* name,bool newVar){
 // std::cout<<"offset: "<<Symbol::TableStackVar.top().GetOffset()<<"\n";
  if(newVar) {
    funcCheck(name, true);
  }
  for(int i=Symbol::TableStackVar.top().GetMinusOffset()+1 ; i<Symbol::TableStackVar.top().GetOffset() ; i++){
   // cout<<Symbol::TableStackVar.top().GetName(i)<<endl;
    if(Symbol::TableStackVar.top().GetName(i)==name) {
      if (newVar) {
          output::errorDef(yylval.line, name);
          exit(2);
      }
      else {return;}
    }
  }
  if(!newVar){
      output::errorUndef(yylval.line, name);
      exit(3);
  }
}
void funcCheck(const char* id,bool newFunc){
  for(int i=0 ; i<(*Symbol::TableStackFunc.top().GetParent()).GetOffset() ; i++){
    if(Symbol::TableStackFunc.top().GetName(i)==id){
      if (newFunc) {
           output::errorDef(yylval.line, id);
           exit(2);
      }
      else {return;}
    }
  }
  if(!newFunc){
       output::errorUndefFunc(yylval.line, id);
       exit(4);
  }
}
void insertFunc(const char* id,const char* retType,vector<string> vec){
  (*Symbol::TableStackFunc.top().GetParent()).InsertFunc(id,output::makeFunctionType(retType,vec));
  Symbol::TableStackFunc.top().offsetInitial++;
  Symbol::TableStackFunc.top().offset++;
}
void checkType(string op){
  string typeA,typeB;
  if(op=="ASSIGN"||op=="RELOP"||op=="BINOP"||op=="AND"||op=="OR"||op=="RETURN"){
    typeB=expStack.top();
    expStack.pop();
  }//else if(op=="NOT"||op=="IF"||op=="WHILE"||op=="PRECOND")
    typeA = expStack.top();
    expStack.pop();


  if(op=="ASSIGN"||op=="RETURN"){
    int counter=0;
    if(op=="RETURN"){
      while(typeA=="WHILE"){
        counter++;
        typeA = expStack.top();
        expStack.pop();
      }

    }
    if(typeA=="INT"){
      if(!((typeB=="INT")||(typeB=="BYTE"))){
        output::errorMismatch(yylval.line);
        exit(4);
      }
    }
    if(typeA=="BYTE"){
      if(!(typeB=="BYTE")){
        output::errorMismatch(yylval.line);
        exit(4);
      }
    }
    if(typeA=="BOOL"){
      if(!(typeB=="BOOL")){
        output::errorMismatch(yylval.line);
        exit(4);
      }
    }
    if(typeA=="VOID") {
      output::errorMismatch(yylval.line);
      exit(4);
    }
    if(op=="RETURN"){
      expStack.push(typeA);
      for (int i = 0; i < counter; ++i) {
        expStack.push("WHILE");
      }
    }
  }

  if(op=="RELOP") {
    if ((!((typeA == "INT")||(typeA == "BYTE")))||(!((typeB == "INT")||(typeB == "BYTE")))){
      output::errorMismatch(yylval.line);
      exit(4);
    } else {
      expStack.push("BOOL");
    }
  }
  if(op=="BINOP") {
    if ((!((typeA == "INT")||(typeA == "BYTE")))||(!((typeB == "INT")||(typeB == "BYTE")))){
      output::errorMismatch(yylval.line);
      exit(4);
    } else {
      if((typeA == "INT") || (typeB == "INT")){
        expStack.push("INT");
      } else {
        expStack.push("BYTE");
      }

    }
  }
  if(op=="AND"||op=="OR") {
    if ((!(typeA == "BOOL"))||(!(typeB == "BOOL"))) {
      output::errorMismatch(yylval.line);
      exit(4);
    } else {
      expStack.push("BOOL");
    }
  }
  if(op=="NOT") {
    if (!(typeA == "BOOL")) {
      output::errorMismatch(yylval.line);
      exit(4);
    } else {
      expStack.push("BOOL");
    }
  }
  if(op=="IF"||op=="WHILE"||op=="PRECOND") {
    if (!(typeA == "BOOL")) {
      output::errorMismatch(yylval.line);
      exit(4);
    }
  }
  if(op=="RETURN_VOID") {
    int counter=0;

    while(typeA=="WHILE") {
      counter++;
      typeA = expStack.top();
      expStack.pop();
    }
    if (!(typeA == "VOID")) {
      output::errorMismatch(yylval.line);
      exit(4);
    } else {
      expStack.push("VOID");
      for (int i = 0; i < counter; ++i) {
        expStack.push("WHILE");
      }
    }
  }
  if(op=="BREAK") {
    if (!(typeA == "WHILE")) {
      output::errorUnexpectedBreak(yylval.line);
      exit(6);
    } else {
      expStack.push("WHILE");
    }
  }
  if(op=="CONTINUE") {
    if (!(typeA == "WHILE")) {
      output::errorUnexpectedContinue(yylval.line);
      exit(7);
    } else {
      expStack.push("WHILE");
    }
  }
}
string getVarType(const char* name){
  for(int i=Symbol::TableStackVar.top().GetMinusOffset()+1 ; i<Symbol::TableStackVar.top().GetOffset() ; i++){
    if(Symbol::TableStackVar.top().GetName(i)==name) {
      return Symbol::TableStackVar.top().GetType(i);
    }
  }
}
string getRetType(string id){
  string retType;
  for(int i=0 ; i<Symbol::TableStackFunc.top().GetOffset() ; i++){
    if(string(Symbol::TableStackFunc.top().GetName(i))==id) {
      retType = Symbol::TableStackFunc.top().GetType(i);
      return retType.substr(retType.find('>')+1,retType.size()-retType.find('>'));
    }
  }


}
void checkArgsVec(const char* id){
  string type,temp;

  for(int i=0 ; i<Symbol::TableStackFunc.top().GetOffset() ; i++){

    if(Symbol::TableStackFunc.top().GetName(i)==id) {
      type = Symbol::TableStackFunc.top().GetType(i);
      break;
    }
  }
  std::vector<std::string> vec;
  vec= std::vector<std::string>();
  int i=1;
  while(i<=type.find(')')&&i<type.size()){
    if(type.at(i)!=','&&type.at(i)!=')'){
      temp.push_back(type.at(i));
    }else {
      if(i!=1) {
        vec.push_back(temp);
      }
      temp="";
    }
  i++;
  }
  i=0;
  string typeA,typeB;
  while(expStack.top()!="FUNC_ARGS"||i<vec.size()){
    if(i==vec.size()||expStack.top()=="FUNC_ARGS"){
      output::errorPrototypeMismatch(yylval.line,id,vec);
      exit(5);
    } else {
      typeA=vec.at(vec.size()-i-1);
      typeB=expStack.top();
      if(typeA=="INT"){
        if(!((typeB=="INT")||(typeB=="BYTE"))){
          output::errorPrototypeMismatch(yylval.line,id,vec);
          exit(5);
        }
      }
      if(typeA=="BYTE"){
        if(!(typeB=="BYTE")){
          output::errorPrototypeMismatch(yylval.line,id,vec);
          exit(5);
        }
      }
      if(typeA=="BOOL"){
        if(!(typeB=="BOOL")){
          output::errorPrototypeMismatch(yylval.line,id,vec);
          exit(5);
        }
      }
      if(typeA=="STRING"){
        if(!(typeB=="STRING")){
          output::errorPrototypeMismatch(yylval.line,id,vec);
          exit(5);
        }
      }
    }
  expStack.pop();
  i++;
  }

  expStack.pop();
}

void checkMain() {
  string type="NONE";
  for (int i = 0; i < Symbol::TableStackFunc.top().GetOffset(); i++) {
    if (Symbol::TableStackFunc.top().GetName(i) == "main") {
      type = Symbol::TableStackFunc.top().GetType(i);
      break;
    }
  }
 if(type!="()->VOID"){
   output::errorMainMissing();
   exit(9);
 }
}
void printExpStack(){
  for (int i = 0; i < expStack.size(); i++) {
    cout<<i<<": "<<expStack.top()<<"\n";
    expStack.pop();
    }
  for (int i = 0; i < Symbol::VarTable::names.size(); i++) {
    cout<<i<<": "<<Symbol::VarTable::names.at(i)<<" "<<Symbol::VarTable::types.at(i)<<"\n";
  }
  while(Symbol::TableStackVar.top().GetParent()!=NULL){
    std::cout<<"offset: "<<Symbol::TableStackVar.top().GetOffset()<<"\n";
    Symbol::TableStackVar.pop();
  }

  exit(-1);
}
const char* GetRegister(){
     for(int i=0; i<16;i++){
        if(Registers[i]==true){
          Registers[i]=false;
          return Registers_names[i];
        }
     }
     return "ERROR";
  }
void FreeAllRegisters(){
  for(int i=0; i<16;i++){
    Registers[i]=true;
    }
  }
void FreeRegister(string Reg){
  if(Reg!="$0" && Reg!= "$a0" &&Reg!="$t0") {
    int num = (Reg[1] - '0') * 10 + Reg[2] - '0';
    Registers[num - 10] = true;
  }
}
void FreeArgsRegisters(vector<string> args){
  for (int i = 0; i < args.size(); ++i) {
    if(args.at(i)!="$0" && args.at(i)!= "$a0" &&args.at(i)!="$t0") {
      int num = (args.at(i)[1] - '0') * 10 + args.at(i)[2] - '0';
     Registers[num - 10] = true;
    }
  }
}
void BinopCode(NewSTYPE& sourceExp,NewSTYPE& exp1,NewSTYPE& exp2,const char* op){
  string command="";
  if(string(op) == "+"){
    command+="addu ";
  }
  if(string(op) == "-"){
    command+="subu ";
  }
  if(string(op) == "*"){
    command+="mul ";
  }
  if(string(op) == "/"){
    CodeBuffer::instance().emit("beq $0,"+string(exp2.val)+" __divError");
    command+="div ";
  }
  FreeRegister(exp2.val);
  command += string(exp1.val)+","+string(exp1.val)+","+string(exp2.val);
  CodeBuffer::instance().emit(command);
  strcpy(sourceExp.val,exp1.val);
  if(string(exp1.token)=="BYTE" && string(exp2.token)=="BYTE") {
    CodeBuffer::instance().emit("andi " + string(sourceExp.val) + "," + string(sourceExp.val) + ",0xff");
    strcpy(sourceExp.token,"BYTE");
  } else {
    strcpy(sourceExp.token,"INT");
  }
}
int stringToInt(string num){
  int number=0;
  for (int i = 0; i < num.size(); ++i) {
    number=number*10;
    number+=num.at(i)-'0';
  }
  return number;

}
string intToString(int num) {
  if (num == 0) { return "0"; }
  string number = "";
  bool flag=false;
  if(num<0){
    num*=-1;
    flag=true;
  }
  while (num != 0) {
    number.push_back((num % 10) + '0');
    num = num / 10;
  }
  if(flag){
    number.push_back('-');
  }
  for (int i = 0; i < number.size() / 2; ++i) {
    char temp = number[i];
    number[i] = number[number.size() - 1 - i];
    number[number.size() - 1 - i] = temp;
  }
  return number;
}
void VarLoadCode(NewSTYPE& sourceExp,const char* var){
  const char* temp=GetRegister();
  strcpy(sourceExp.val,temp);
  int varOffset=(-1)*GetVarOffset(var);
  CodeBuffer::instance().emit("lw "+string(temp)+","+intToString(varOffset)+"($fp)");
  if(getVarType(var)=="BOOL"){
    sourceExp.falseList.push_back(CodeBuffer::instance().emit("beq $0,"+string(temp)+", "));
    sourceExp.trueList.push_back(CodeBuffer::instance().emit("j "));
    sourceExp.quad=CodeBuffer::instance().genLabel();
    FreeRegister(temp);
  }
  string type=getVarType(var);
  char temptype[type.size()+1];
  for (int i = 0; i < type.size(); ++i) {
    temptype[i]=type[i];
  }
  temptype[type.size()]=0;
  strcpy(sourceExp.token,temptype);
 // cout<<var<<" is: "<<sourceExp.token<<endl;

}
void ImmLoadCode(NewSTYPE& sourceExp,const char* value){
  const char* temp=GetRegister();
  strcpy(sourceExp.val,temp);
  if(string(value)=="true" || string(value)=="false") {
    string label = CodeBuffer::instance().genLabel();
    CodeBuffer::instance().emit("li " + string(temp) + "," + string((string(value)=="true")?"1":"0"));
    mybpatch(sourceExp.trueList, label);
    mybpatch(sourceExp.falseList, label);
  } else {
    CodeBuffer::instance().emit("li " + string(temp) + "," + value);
  }
}
void DecVarCode(const char* var) {
  if (getVarType(var) != "BOOL") {
    CodeBuffer::instance().emit("subu $sp,$sp,4");
  }
}
void AssignVarCode(string type,const char* var,NewSTYPE* exp) {

  int varOffset = (-1) * GetVarOffset(var);
  if (type != "BOOL"){
    if (exp != NULL) {

      CodeBuffer::instance().emit("sw " + string(exp->val) + "," + intToString(varOffset) + "($fp)");
      FreeRegister(exp->val);
    } else {
      CodeBuffer::instance().emit("sw $0," + intToString(varOffset) + "($fp)");
    }
  }
  else {
    vector<int> vec;
    vector<int> init;
    if(exp==NULL){
      init.push_back(CodeBuffer::instance().emit("j "));
    }
    string trueLabel=CodeBuffer::instance().genLabel();
    CodeBuffer::instance().emit("addu $t0,$0,1");
    vec.push_back(CodeBuffer::instance().emit("j "));
    string falseLabel=CodeBuffer::instance().genLabel();
    CodeBuffer::instance().emit("addu $t0,$0,0");
    string endLabel=CodeBuffer::instance().genLabel();
    CodeBuffer::instance().emit("subu $sp,$sp,4");
    CodeBuffer::instance().emit("sw $t0," + intToString(varOffset) + "($fp)");
    mybpatch(vec,endLabel);
    if(exp==NULL){
      mybpatch(init,falseLabel);;
    } else{
      mybpatch(exp->trueList,trueLabel);
      mybpatch(exp->falseList,falseLabel);
    }
  }


}
int GetVarOffset(const char* var){
  for(int i=Symbol::TableStackVar.top().GetMinusOffset()+1 ; i<Symbol::TableStackVar.top().GetOffset() ; i++){
    if(Symbol::TableStackVar.top().GetName(i)==var) {
      return i*4;
    }
  }
}
void NotCode(NewSTYPE& sourceExp,NewSTYPE& exp){
  sourceExp.trueList = exp.falseList;
  sourceExp.falseList = exp.trueList;
  sourceExp.quad=exp.quad;
}
void AndCode(NewSTYPE& sourceExp,NewSTYPE& exp1,NewSTYPE& exp2){
  sourceExp.trueList=exp2.trueList;
  mybpatch(exp1.trueList,exp1.quad);
  sourceExp.falseList=exp1.falseList+exp2.falseList;
  sourceExp.quad=exp2.quad;
}
void OrCode(NewSTYPE& sourceExp,NewSTYPE& exp1,NewSTYPE& exp2){
  sourceExp.trueList=exp1.trueList+exp2.trueList;
  mybpatch(exp1.falseList,exp1.quad);
  sourceExp.falseList=exp2.falseList;
  sourceExp.quad=exp2.quad;

}
void RelopCode(NewSTYPE& sourceExp,NewSTYPE& exp1,NewSTYPE& exp2,const char* op){
  string command="";
  if(string(op) == "=="){
    command+="beq ";
  }
  if(string(op) == "!="){
    command+="bne ";
  }
  if(string(op) == ">"){
    command+="bgt ";
  }
  if(string(op) == "<"){
    command+="blt ";
  }
  if(string(op) == ">="){
    command+="bge ";
  }
  if(string(op) == "<="){
    command+="ble ";
  }
  command+=string(exp1.val)+","+string(exp2.val)+", ";
  sourceExp.trueList.push_back(CodeBuffer::instance().emit(command));
  sourceExp.falseList.push_back(CodeBuffer::instance().emit("j "));
  sourceExp.quad=CodeBuffer::instance().genLabel();
  strcpy(sourceExp.val,"???");
  FreeRegister(exp1.val);
  FreeRegister(exp2.val);
}
void TrueCode(NewSTYPE& sourceExp){
  sourceExp.trueList.push_back(CodeBuffer::instance().emit("j "));
  sourceExp.quad=CodeBuffer::instance().genLabel();
  strcpy(sourceExp.val,"???");
}
void FalseCode(NewSTYPE& sourceExp){
  sourceExp.falseList.push_back(CodeBuffer::instance().emit("j "));
  sourceExp.quad=CodeBuffer::instance().genLabel();
  strcpy(sourceExp.val,"???");
}
void CallCode(NewSTYPE& sourceExp,string func,vector<string> vec){
  FreeArgsRegisters(vec);
  SaveRegisters();
  CodeBuffer::instance().emit("subu $sp,$sp,4");
  CodeBuffer::instance().emit("sw $ra,0($sp)");
  CodeBuffer::instance().emit("subu $sp,$sp,4");
  CodeBuffer::instance().emit("sw $fp,0($sp)");
  for (int i = 0; i < vec.size(); ++i) {
    CodeBuffer::instance().emit("subu $sp,$sp,4");
    CodeBuffer::instance().emit("sw "+vec.at(i)+",0($sp)");
  }
  CodeBuffer::instance().emit("jal "+func);
  CodeBuffer::instance().emit("addu $sp,$sp,"+intToString(4*vec.size()));
  CodeBuffer::instance().emit("lw $fp,0($sp)");
  CodeBuffer::instance().emit("addu $sp,$sp,4");
  CodeBuffer::instance().emit("lw $ra,0($sp)");
  CodeBuffer::instance().emit("addu $sp,$sp,4");
  RecoverRegisters();
  const char *Reg = GetRegister();
  CodeBuffer::instance().emit("move " + string(Reg) + ",$a0");
  strcpy(sourceExp.val,Reg);
  string type=getRetType(func);
  char tempType[type.size()+1];
  for (int j = 0; j < type.size(); ++j) {
    tempType[j]=type[j];
  }
  tempType[type.size()]=0;
  strcpy(sourceExp.token,tempType);
}
const char* StringLoadCode(char* str){
  msgCounter++;
  CodeBuffer::instance().emitData("msg"+intToString(msgCounter)+":  .asciiz "+string(str));
  const char* temp=GetRegister();
  CodeBuffer::instance().emit("la "+string(temp)+",msg"+intToString(msgCounter));
  return temp;
}
void SaveRegisters(){
  for (int i = 0; i < 16; ++i) {
    if (Registers[i] == false) {
      CodeBuffer::instance().emit("subu $sp,$sp,4");
      CodeBuffer::instance().emit("sw $" + intToString(i + 10) + ",0($sp)");
    }
  }
}
void RecoverRegisters(){
  for (int i = 15; i >= 0; i--) {
    if (Registers[i] == false) {
      CodeBuffer::instance().emit("lw $" + intToString(i + 10) + ",0($sp)");
      CodeBuffer::instance().emit("addu $sp,$sp,4");
    }
  }
}
void mybpatch(std::vector<int>& address_list, const std::string &loc){
  CodeBuffer::instance().bpatch(address_list,loc);
  address_list.clear();
}
void newFuncCode(string str){
  THISFUNC=str;
  CodeBuffer::instance().emitData("___"+str+":  .asciiz \""+str+"\"");
  FreeAllRegisters();
  CodeBuffer::instance().emit(str+":");
  CodeBuffer::instance().emit("subu $fp,$sp,4");
}

void retFuncCode(string value){
  if(THISFUNC!="main") {
    CodeBuffer::instance().emit("move $a0," + value);
    CodeBuffer::instance().emit("addu $sp,$fp,4");
    CodeBuffer::instance().emit("jr $ra");
    FreeRegister(value);
  } else {
    CodeBuffer::instance().emit("li $v0, 10");
    CodeBuffer::instance().emit("syscall");
  }
}
void preCondCode(NewSTYPE& exp){
  string falseLabel=CodeBuffer::instance().genLabel();
  CodeBuffer::instance().emit("la $t0,___"+THISFUNC);
  CodeBuffer::instance().emit("subu $sp,$sp,4");
  CodeBuffer::instance().emit("sw $t0,0($sp)");
  CodeBuffer::instance().emit("jal __preError");
  string endLabel=CodeBuffer::instance().genLabel();
  mybpatch(exp.trueList,endLabel);
  mybpatch(exp.falseList,falseLabel);

}
void ExpListBoolCode(NewSTYPE& exp){
  if(exp.trueList.size()>0 || exp.falseList.size()>0) {
    const char *Reg = GetRegister();
    vector<int> vec;
    string trueLabel = CodeBuffer::instance().genLabel();
    CodeBuffer::instance().emit("addu " + string(Reg) + ",$0,1");
    vec.push_back(CodeBuffer::instance().emit("j "));
    string falseLabel = CodeBuffer::instance().genLabel();
    CodeBuffer::instance().emit("addu " + string(Reg) + ",$0,0");
    string endLabel = CodeBuffer::instance().genLabel();
    mybpatch(vec, endLabel);
    mybpatch(exp.trueList, trueLabel);
    mybpatch(exp.falseList, falseLabel);
    strcpy(exp.val, Reg);
  }
}
void BoolCode(NewSTYPE& exp){
  if(string(exp.val)!="???" && string(exp.token)=="BOOL"){
    exp.falseList.push_back(CodeBuffer::instance().emit("beq $0,"+string(exp.val)+", "));
    exp.trueList.push_back(CodeBuffer::instance().emit("j "));
    exp.quad=CodeBuffer::instance().genLabel();
    FreeRegister(exp.val);
    strcpy(exp.val,"???");
  }
}